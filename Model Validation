## What is Model Validation - Mean Absolute Error 
# from sklearn.metrics import mean_absolute_error 
# predicted_home_prices = melbourne_model.predict(X) 
# mean_absolute_error(y, predicted_home_prices) 

## introduce validation data by splitting 
# from sklearn.model_selection import train_test_split 
# split data into training and validation data, for both features and target.The split is based on a random number generator. Supplying a numeric value to the random_state argument guarantees we get the same split every time we run this script. 

## Beginning of Model Validation Exercise 

import pandas as pd 
from sklearn.tree import DecisionTreeRegressor 

iowa_file_path = '../input/home-data-for-ml-course/train.csv'
home_data = pd.read_csv(iowa_file_path)
y = home_data.SalePrice 
feature_columns = ['LotArea', 'YearBuilt', '1stFlrSF', '2ndFlrSF', 'FullBath', 'BedroomAbvGr', 'TotRmsAbvGrd']
X = home_data[feature_columns]

#specify model 
iowa_model = DecisionTreeRegressor()
#fit model 
iowa_model.fit(X, y)

print("First in-sample predictions:", iowa_model.predict(X.head()))
print("Actual target values for those homes:", y.head().tolist())

## Now using Validation data 
# step 1: split data 
from sklearn.model_selection import train_test_split 

train_X, val_X, train_y, val_y = train_test_split(X, y, random_state = 1)

# step 2: specify and fit the model 
iowa_model = DecisionTreeRegressor(random_state = 1) #specify model
iowa_model.fit(train_X, train_y) #fitting

# step 3: make predictions with validation data 
val_predictions = iowa_model.predict(val_X) #print the top few validation predictions
print(iowa_model.predict(val_X.head())) #print the top few actual prices from validation data
print(val_y.head().tolist())

#step 4: Calculate the Mean Absolute Error in Validation Data 
from sklearn.metrics import mean_absolute_error 
val_mae = mean_absolute_error(val_y, val_predictions)
